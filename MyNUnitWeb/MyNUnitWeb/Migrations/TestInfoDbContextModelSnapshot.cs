// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyNUnitWeb.Data;

#nullable disable

namespace MyNUnitWeb.Migrations
{
    [DbContext(typeof(TestInfoDbContext))]
    partial class TestInfoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("MyNUnit.Info.AssemblyTestInfo", b =>
                {
                    b.Property<int>("AssemblyTestInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestInfoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssemblyTestInfoId");

                    b.HasIndex("TestInfoId");

                    b.ToTable("AssemblyTestInfo");
                });

            modelBuilder.Entity("MyNUnit.Info.ClassTestInfo", b =>
                {
                    b.Property<int>("ClassTestInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssemblyTestInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassTestInfoId");

                    b.HasIndex("AssemblyTestInfoId");

                    b.ToTable("ClassTestInfo");
                });

            modelBuilder.Entity("MyNUnit.Info.ExceptionInfo", b =>
                {
                    b.Property<int>("ExceptionInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActualExceptionType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpectedExceptionType")
                        .HasColumnType("TEXT");

                    b.HasKey("ExceptionInfoId");

                    b.ToTable("ExceptionInfo");
                });

            modelBuilder.Entity("MyNUnit.Info.MethodTestInfo", b =>
                {
                    b.Property<int>("MethodTestInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClassTestInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("CompletionTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExceptionInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasCaughtException")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ignored")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("MethodTestInfoId");

                    b.HasIndex("ClassTestInfoId");

                    b.HasIndex("ExceptionInfoId");

                    b.ToTable("MethodTestInfo");
                });

            modelBuilder.Entity("MyNUnitWeb.Data.TestInfo", b =>
                {
                    b.Property<int>("TestInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("TestInfoId");

                    b.ToTable("TestsInfo");
                });

            modelBuilder.Entity("MyNUnit.Info.AssemblyTestInfo", b =>
                {
                    b.HasOne("MyNUnitWeb.Data.TestInfo", null)
                        .WithMany("AssembliesTestInfo")
                        .HasForeignKey("TestInfoId");
                });

            modelBuilder.Entity("MyNUnit.Info.ClassTestInfo", b =>
                {
                    b.HasOne("MyNUnit.Info.AssemblyTestInfo", null)
                        .WithMany("ClassesInfo")
                        .HasForeignKey("AssemblyTestInfoId");
                });

            modelBuilder.Entity("MyNUnit.Info.MethodTestInfo", b =>
                {
                    b.HasOne("MyNUnit.Info.ClassTestInfo", null)
                        .WithMany("MethodsInfo")
                        .HasForeignKey("ClassTestInfoId");

                    b.HasOne("MyNUnit.Info.ExceptionInfo", "ExceptionInfo")
                        .WithMany()
                        .HasForeignKey("ExceptionInfoId");

                    b.Navigation("ExceptionInfo");
                });

            modelBuilder.Entity("MyNUnit.Info.AssemblyTestInfo", b =>
                {
                    b.Navigation("ClassesInfo");
                });

            modelBuilder.Entity("MyNUnit.Info.ClassTestInfo", b =>
                {
                    b.Navigation("MethodsInfo");
                });

            modelBuilder.Entity("MyNUnitWeb.Data.TestInfo", b =>
                {
                    b.Navigation("AssembliesTestInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
